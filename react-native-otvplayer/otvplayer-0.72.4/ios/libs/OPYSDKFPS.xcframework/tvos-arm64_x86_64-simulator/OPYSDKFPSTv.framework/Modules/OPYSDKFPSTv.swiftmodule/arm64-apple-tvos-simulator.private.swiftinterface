// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9.2 (swiftlang-5.9.2.2.56 clang-1500.1.0.2.5)
// swift-module-flags: -target arm64-apple-tvos12.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Onone -module-name OPYSDKFPSTv
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AVFoundation
import CoreMedia
import Foundation
@_exported import OPYSDKFPSTv
import Swift
import SystemConfiguration
import UIKit
import VideoToolbox
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
import os
@objc @_inheritsConvenienceInitializers public class OTVAVURLAsset : AVFoundation.AVURLAsset {
  @objc override dynamic public init(url URL: Foundation.URL, options: [Swift.String : Any]? = nil)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(OTVSDK) public class OTVSDKInternal : ObjectiveC.NSObject {
  @objc public static func loadWithLicence(_ licence: Swift.String? = nil)
  @objc public static func setLogging(level: OPYSDKFPSTv.OTVLogType = .warning)
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers public class OTVSDK {
  public static let errorNotificationName: Foundation.Notification.Name
  public static let sdkLoadedNotificationName: Foundation.Notification.Name
  public static func load(licence: Swift.String? = nil)
  public static func setLogging(level: OPYSDKFPSTv.OTVLogType = .warning)
  public static func setLogProvider(xLogProvider: any OPYSDKFPSTv.IOTVLogProvider)
  @objc public enum OTVError : Swift.Int {
    case expiredLicence
    case licenceInvalid
    case externalPlaybackNotAllowed
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc deinit
}
@objc @_inheritsConvenienceInitializers final public class OTVDefaultLicenseDelegate : OPYSDKFPSTv.OTVCommonLicenseDelegate {
  @objc final public func setHTTPHeader(parameters: [Swift.String : Swift.String])
  @objc override final public func generateHTTPHeaders(assetID: Swift.String) -> [Swift.String : Swift.String]?
  @objc override public init(certificateURL: Foundation.URL, licenseURL: Foundation.URL)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class ThumbnailPair {
  final public let startTimes: [Swift.Int32]
  final public let thumbnailDictionary: [Swift.Int32 : UIKit.UIImage]
  @objc deinit
}
extension Foundation.NSNotification.Name {
  public static let OTVSSMSetupErrorNotification: Foundation.Notification.Name
  public static let OTVSSMTeardownErrorNotification: Foundation.Notification.Name
  public static let OTVSSMHeartbeatErrorNotification: Foundation.Notification.Name
}
@objc public protocol IOTVLogProvider : ObjectiveC.NSObjectProtocol {
  @objc func logProvider(xLog: Swift.String)
}
@objc public class OTVEvent : ObjectiveC.NSObject {
  @objc public init(timestamp: Foundation.Date, type: Swift.String, command: Swift.String, extra: Swift.String?)
  @objc @_inheritsConvenienceInitializers public class EventType : ObjectiveC.NSObject {
    public static let eventTimeline: Swift.String
    public static let playback: Swift.String
    public static let licenceRequest: Swift.String
    public static let sessionManagement: Swift.String
    @objc override dynamic public init()
    @objc deinit
  }
  @objc @_inheritsConvenienceInitializers public class EventCommand : ObjectiveC.NSObject {
    @_hasMissingDesignatedInitializers public class Timeline {
      public static let loggingStarted: Swift.String
      public static let loggingStopped: Swift.String
      @objc deinit
    }
    @objc @_inheritsConvenienceInitializers public class Playback : ObjectiveC.NSObject {
      public static let prepared: Swift.String
      public static let firstFrame: Swift.String
      public static let setURL: Swift.String
      public static let start: Swift.String
      public static let stop: Swift.String
      @objc override dynamic public init()
      @objc deinit
    }
    @objc @_inheritsConvenienceInitializers public class LicenceRequest : ObjectiveC.NSObject {
      public static let provisionRequestStart: Swift.String
      public static let provisionRequestSuccess: Swift.String
      public static let provisionRequestFailure: Swift.String
      public static let keyRequestStart: Swift.String
      public static let keyRequestSuccess: Swift.String
      public static let keyRequestFailure: Swift.String
      @objc override dynamic public init()
      @objc deinit
    }
    @objc @_inheritsConvenienceInitializers public class SessionManagement : ObjectiveC.NSObject {
      public static let setupStart: Swift.String
      public static let setupSuccess: Swift.String
      public static let setupFailure: Swift.String
      public static let teardownStart: Swift.String
      public static let teardownSuccess: Swift.String
      public static let teardownFailure: Swift.String
      public static let renewalStart: Swift.String
      public static let renewalSuccess: Swift.String
      public static let renewalFailure: Swift.String
      public static let heartbeatStart: Swift.String
      public static let heartbeatSuccess: Swift.String
      public static let heartbeatFailure: Swift.String
      @objc override dynamic public init()
      @objc deinit
    }
    @objc override dynamic public init()
    @objc deinit
  }
  @objc @_inheritsConvenienceInitializers public class ExtraKey : ObjectiveC.NSObject {
    public static let url: Swift.String
    public static let contentToken: Swift.String
    public static let sessionToken: Swift.String
    public static let error: Swift.String
    @objc override dynamic public init()
    @objc deinit
  }
  final public let timestamp: Foundation.Date
  final public let type: Swift.String
  final public let command: Swift.String
  final public let extra: Swift.String?
  public func parseExtra() -> [Swift.String : Any?]?
  public static func buildExtra(_ dict: [Swift.String : Any?]) -> Swift.String?
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class OTVContainerView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) final public let customOverlayView: UIKit.UIView
  @_Concurrency.MainActor(unsafe) final public let playerLayer: AVFoundation.AVPlayerLayer
  @_Concurrency.MainActor(unsafe) weak public var player: OPYSDKFPSTv.OTVAVPlayer? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func addSubview(_ view: UIKit.UIView)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func insertSubview(_ view: UIKit.UIView, at index: Swift.Int)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func insertSubview(_ view: UIKit.UIView, aboveSubview siblingSubview: UIKit.UIView)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func insertSubview(_ view: UIKit.UIView, belowSubview siblingSubview: UIKit.UIView)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func bringSubviewToFront(_ view: UIKit.UIView)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func sendSubviewToBack(_ view: UIKit.UIView)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func exchangeSubview(at index1: Swift.Int, withSubviewAt index2: Swift.Int)
  @objc deinit
}
@objc public enum OTVTrackType : Swift.Int {
  case audio
  case subtitle
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension Foundation.NSNotification.Name {
  public static let OTVIFrameThumbnailsAvailable: Foundation.Notification.Name
  public static let OTVIFrameThumbnailsNotAvailable: Foundation.Notification.Name
  public static let OTVIFrameThumbnailsError: Foundation.Notification.Name
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class OTVThumbnailView : UIKit.UIView {
  @objc @_Concurrency.MainActor(unsafe) public init(url: Foundation.URL, frame: CoreFoundation.CGRect = .zero)
  @objc deinit
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func layoutSubviews()
  @objc @_Concurrency.MainActor(unsafe) public func hasThumbnails() -> Swift.Bool
  @objc @_Concurrency.MainActor(unsafe) public func setTime(toSeconds seconds: Foundation.TimeInterval)
}
@objc(OTVThumbnailError) public enum OTVIFrameThumbnailError : Swift.Int {
  case positionError = 1
  case itemError = 2
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension OPYSDKFPSTv.OTVIFrameThumbnailError {
  public init?(intValue: Swift.Int)
  public var intValue: Swift.Int? {
    get
  }
}
@objc public protocol OTVCustomerSSMCallback : ObjectiveC.NSObjectProtocol {
  @objc func license(keySystem: Swift.String, payload: Foundation.Data, licenseType: OPYSDKFPSTv.OTVLicenseRequestType) -> OPYSDKFPSTv.OTVSSMLicenseResponse
  @objc func heartbeat()
}
@objc public class OTVSSMLicenseResponse : ObjectiveC.NSObject {
  public init(license: Foundation.Data? = nil, heartbeat: Swift.Int = 0, renewType: OPYSDKFPSTv.OTVLicenseRenewType = OTVLicenseRenewType.enforced)
  @objc deinit
}
@objc(OTVLicenseRenewType) public enum OTVLicenseRenewType : Swift.Int {
  case heartbeat
  case enforced
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension OPYSDKFPSTv.OTVLicenseRenewType {
  public init?(intValue: Swift.Int)
  public var intValue: Swift.Int? {
    get
  }
}
@objc(OTVLicenseRequestType) public enum OTVLicenseRequestType : Swift.Int {
  case request
  case renewal
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension OPYSDKFPSTv.OTVLicenseRequestType {
  public init?(intValue: Swift.Int)
  public var intValue: Swift.Int? {
    get
  }
}
@objc public class OTVCustomerSSMDelegate : ObjectiveC.NSObject, OPYSDKFPSTv.OTVLicenseDelegate {
  public init(certificate: Foundation.Data)
  @objc deinit
  public func setCallback(_ callback: (any OPYSDKFPSTv.OTVCustomerSSMCallback)?)
  @objc public func certificate() -> Foundation.Data?
  @objc public func scheme() -> Swift.String?
  @objc public func contentIdentifier(url: Foundation.URL) -> Foundation.Data?
  @objc public func ckcMessage(spc: Foundation.Data) -> Foundation.Data?
  @objc public func ckcMessageWithID(spc: Foundation.Data, assetID: Swift.String) -> Foundation.Data?
  @objc public func ckcMessageWith(spc: Foundation.Data, assetID: Swift.String, session: AVFoundation.AVContentKeySession, keyRequest: AVFoundation.AVContentKeyRequest) -> Foundation.Data?
  final public func reset()
}
@objc @_inheritsConvenienceInitializers public class OTVDRMInfo : ObjectiveC.NSObject {
  @objc public var name: Swift.String? {
    get
  }
  @objc public var contentType: Swift.String? {
    get
  }
  @objc public var securityLevel: OPYSDKFPSTv.OTVDRMInfo.OTVDRMSecurityLevel {
    get
  }
  @objc public var securityLevelName: Swift.String {
    @objc get
  }
  @objc public enum OTVDRMSecurityLevel : Swift.Int {
    case otvDRMSLUknown
    case otvDRMSLSW
    case otvDRMSLHWCrypt
    case otvDRMSLHWDecode
    public func name() -> Swift.String
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class OTVDRM : ObjectiveC.NSObject {
  @objc public static let shared: OPYSDKFPSTv.OTVDRM
  @objc public func getDRMInfo() -> [OPYSDKFPSTv.OTVDRMInfo]
  @objc public func getDRMInfo(drmName: Swift.String, mediaType: Swift.String, contentType: Swift.String) -> [OPYSDKFPSTv.OTVDRMInfo]
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class AssetThumbnails : ObjectiveC.NSObject {
  @objc override dynamic public init()
  public func prepareThumbnails(delegate: any OPYSDKFPSTv.ThumbnailsDelegate, url: Foundation.URL)
  public func reset()
  public func thumbnails() -> OPYSDKFPSTv.ThumbnailPair?
  @objc deinit
}
public protocol ThumbnailsDelegate : AnyObject {
  func prepared()
  func failed(error: OPYSDKFPSTv.ThumbnailError, message: Swift.String)
}
public enum Component {
  case date(Swift.String)
  case message
  case level
  case file(fullPath: Swift.Bool, fileExtension: Swift.Bool)
  case line
  case column
  case function
  case location
  case thread
  case block(() -> Any?)
}
extension Foundation.NSNotification.Name {
  public static let OTVLicenseDownloadEnded: Foundation.Notification.Name
}
@objc public protocol AdaptiveStreaming {
  @objc func availableBitrates() -> [Swift.Int]?
  @objc func selectedBitrate() -> Swift.Double
  @objc func bitrateSwitches() -> Swift.Int
  @objc func bitrateDowngrade() -> Swift.Int
  @objc func averageBitrate() -> Swift.Int
  @objc func averageVideoBitrate() -> Swift.Int
  @objc func averageAudioBitrate() -> Swift.Int
}
@objc public protocol NetworkUsage {
  @objc func bytesDownloaded() -> Swift.Int64
  @objc func downloadBitrate() -> Swift.Double
  @objc func downloadBitrateAverage() -> Swift.Double
  @objc func numberOfMediaRequests() -> Swift.Int
  @objc func transferDuration() -> Foundation.TimeInterval
  @objc func downloadsOverdue() -> Swift.Int
}
@objc public protocol ContentServer {
  @objc func finalIPAddress() -> Swift.String?
  @objc func finalURL() -> Swift.String?
  @objc func url() -> Swift.String?
  @objc func numberOfServerAddressChanges() -> Swift.Int
}
@_hasMissingDesignatedInitializers @objc public class OTVNetworkAnalytics : ObjectiveC.NSObject {
  @objc public enum OTVHTTPError : Swift.Int, Swift.CaseIterable {
    case unrecognizedHttpResponse400 = 400
    case http401Unauthorized = 401
    case unrecognizedHttpResponse402 = 402
    case http403Forbidden = 403
    case http404FileNotFound = 404
    case unrecognizedHttpResponse405 = 405
    case unrecognizedHttpResponse406 = 406
    case unrecognizedHttpResponse407 = 407
    case unrecognizedHttpResponse408 = 408
    case unrecognizedHttpResponse409 = 409
    case unrecognizedHttpResponse410 = 410
    case unrecognizedHttpResponse411 = 411
    case unrecognizedHttpResponse412 = 412
    case unrecognizedHttpResponse413 = 413
    case unrecognizedHttpResponse414 = 414
    case unrecognizedHttpResponse415 = 415
    case unrecognizedHttpResponse500 = 500
    case unrecognizedHttpResponse501 = 501
    case unrecognizedHttpResponse502 = 502
    case http503Unavailable = 503
    case unrecognizedHttpResponse504 = 504
    case unrecognizedHttpResponse505 = 505
    public init?(rawValue: Swift.Int)
    public typealias AllCases = [OPYSDKFPSTv.OTVNetworkAnalytics.OTVHTTPError]
    public typealias RawValue = Swift.Int
    public static var allCases: [OPYSDKFPSTv.OTVNetworkAnalytics.OTVHTTPError] {
      get
    }
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc public enum NetworkError : Swift.Int {
    case unknown = -1001
    case httpError = 400
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc public enum Event : Swift.Int {
    case selectedBitrateChanged = 0
    case availableBitratesChanged = 1
    case urlChanged = 2
    case errorChanged = 3
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc public var error: Swift.Int {
    @objc get
  }
  @objc public var httpError: Swift.Int {
    @objc get
  }
  @objc public var httpErrorMessage: Swift.String? {
    @objc get
  }
  @objc public var httpErrorUnderlyingErrorCode: Swift.Int {
    @objc get
  }
  @objc public var httpErrorUnderlyingErrorDomain: Swift.String {
    @objc get
  }
  @objc public var adaptiveStreaming: any OPYSDKFPSTv.AdaptiveStreaming {
    get
  }
  @objc public var networkUsage: any OPYSDKFPSTv.NetworkUsage {
    get
  }
  @objc public var contentServer: any OPYSDKFPSTv.ContentServer {
    get
  }
  @objc deinit
}
extension Foundation.NSNotification.Name {
  public static let OTVNetworkAnalyticsNotification: Foundation.Notification.Name
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class OTVDRMManager : ObjectiveC.NSObject {
  public enum OTVDRMLicenseError : Swift.Int {
    case keyResponseWithExpiredLease
    case keyResponseError
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc public static let shared: OPYSDKFPSTv.OTVDRMManager
  @objc public func setLicenseDelegate(_ delegate: any OPYSDKFPSTv.OTVLicenseDelegate)
  @objc deinit
}
extension Foundation.NSNotification.Name {
  public static let OTVDRMLicenseError: Foundation.Notification.Name
}
extension OPYSDKFPSTv.OTVDRMManager {
  public struct Keys {
    public static let keyResponseWithExpiredLease: Swift.String
    public static let keyResponseError: Swift.String
  }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class OTVEventTimeline : ObjectiveC.NSObject {
  @objc public static let shared: OPYSDKFPSTv.OTVEventTimeline
  @objc public func enableTimeline(_ enable: Swift.Bool)
  @objc public func isEnabled() -> Swift.Bool
  @objc public func getTimelineList() -> [OPYSDKFPSTv.OTVEvent]
  @objc public func getTimelineList(limit: Swift.Int) -> [OPYSDKFPSTv.OTVEvent]
  @objc public func getTimelineList(from fromDate: Foundation.Date, to toDate: Foundation.Date) -> [OPYSDKFPSTv.OTVEvent]
  @objc public func getTimelineList(type: Swift.String) -> [OPYSDKFPSTv.OTVEvent]
  @objc public func addToTimeline(type: Swift.String, command: Swift.String, extra: Swift.String? = nil)
  @objc public func removeTimeline(olderThan: Foundation.Date)
  @objc deinit
}
extension OPYSDKFPSTv.OTVLogType : Swift.Comparable {
  public static func < (lhs: OPYSDKFPSTv.OTVLogType, rhs: OPYSDKFPSTv.OTVLogType) -> Swift.Bool
}
@objc public protocol Player {
  @objc func bufferedDuration() -> Swift.Double
  @objc func availableResoloutions() -> [CoreFoundation.CGSize]?
  @objc func selectedResoloution() -> CoreFoundation.CGSize
  @objc func startUpTime() -> Swift.Double
  @objc func numberOfStalls() -> Swift.Int
  @objc func playbackType() -> Swift.String?
  @objc func playbackStartDate() -> Foundation.Date?
  @objc func playbackStartOffset() -> Foundation.TimeInterval
}
@objc public protocol Rendering {
  @objc func frameDrops() -> Swift.Int
  @objc func frameDropsPerSecond() -> Swift.Int
  @objc func framesPerSecond() -> Swift.Int
  @objc func framesPerSecondNominal() -> Swift.Int
}
@objc @_hasMissingDesignatedInitializers public class OTVPlaybackAnalytics : ObjectiveC.NSObject {
  @objc public var player: any OPYSDKFPSTv.Player {
    @objc get
  }
  @objc public var rendering: any OPYSDKFPSTv.Rendering {
    @objc get
  }
  public enum Event : Swift.Int {
    case availableResoloutionChanged
    case selectedResolutionChanged
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc deinit
}
extension Foundation.NSNotification.Name {
  public static let OTVPlaybackAnalyticsNotification: Foundation.Notification.Name
}
extension Foundation.FileManager {
  public func allocatedSizeOfDirectory(at directoryURL: Foundation.URL) throws -> Swift.UInt64
}
public class OTVDecoderInfoUtil {
  public init()
  public func getVideoDecoderInfo() -> [OPYSDKFPSTv.OTVVideoDecoderInfo]
  public func getAudioDecoderInfo() -> [OPYSDKFPSTv.OTVAudioDecoderInfo]
  public func isVideoDecoderSupported(xFormat: OPYSDKFPSTv.OTVDecoderFormat) -> Swift.Bool
  public func isAudioDecoderSupported(xFormat: OPYSDKFPSTv.OTVDecoderFormat) -> Swift.Bool
  @objc deinit
}
@objc public protocol OTVTracksChangedListener {
  @objc func tracksChanged()
}
@objc @_inheritsConvenienceInitializers public class OTVEventTimelineAnalyzer : ObjectiveC.NSObject {
  public static func getStartDuration() -> [(url: Swift.String, startDuration: Swift.Int)]
  public static func getStartDuration(for url: Swift.String) -> [Swift.Int]
  public static func getStartDurationDetails(for url: Swift.String) -> [OPYSDKFPSTv.OTVEvent]
  public static func getZapDuration(from fromURL: Swift.String, to toURL: Swift.String) -> Swift.Int
  @objc override dynamic public init()
  @objc deinit
}
public let OTVAVFoundationErrors: Foundation.Notification.Name
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class OTVAVPlayer : AVFoundation.AVPlayer {
  @objc public var networkAnalytics: OPYSDKFPSTv.OTVNetworkAnalytics? {
    get
  }
  @objc public var playbackAnalytics: OPYSDKFPSTv.OTVPlaybackAnalytics? {
    get
  }
  @objc public var subtitleView: UIKit.UIView? {
    @objc get
    @objc set
  }
  @objc override dynamic public init(playerItem item: AVFoundation.AVPlayerItem?)
  @objc override convenience dynamic public init(url URL: Foundation.URL)
  convenience public init(playerItem item: OPYSDKFPSTv.OTVAVPlayerItem? = nil)
  public func setLicenseDelegate(_ delegate: any OPYSDKFPSTv.OTVLicenseDelegate)
  @objc deinit
  @objc override dynamic public func replaceCurrentItem(with item: AVFoundation.AVPlayerItem?)
  @objc override dynamic public func play()
  @objc override dynamic public func playImmediately(atRate rate: Swift.Float)
  @objc public func tracks(type: OPYSDKFPSTv.OTVTrackType) -> [OPYSDKFPSTv.OTVTrackInfo]
  @objc public func selectedTrack(type: OPYSDKFPSTv.OTVTrackType) -> Swift.Int
  @objc public func selectTrack(type: OPYSDKFPSTv.OTVTrackType, index: Swift.Int)
  @objc public func deselectTrack(type: OPYSDKFPSTv.OTVTrackType, index: Swift.Int)
  @objc public func register(tracksChangedListener: any OPYSDKFPSTv.OTVTracksChangedListener)
  @objc public func unregister(tracksChangedListener: any OPYSDKFPSTv.OTVTracksChangedListener)
  @objc(addSubtitleWithUrl:mimeType:language:) public func addSubtitleWithUrl(subtitleURL: Swift.String, mimeType: Swift.String, language: Swift.String)
}
public enum OTVAVPlayerError : Swift.Int {
  case unknown
  case otvAVPlayerIsNil
  case otvAVPlayerItemIsNil
  case notAnOTVAVPlayerItem
  case opySubtitleManagerNotSet
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum OTVAVFoundationError : Swift.Int {
  case otvAVPlayer
  case otvAVPlayerItem
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension OPYSDKFPSTv.OTVAVFoundationError {
  public init?(intValue: Swift.Int)
  public var intValue: Swift.Int? {
    get
  }
}
extension OPYSDKFPSTv.OTVAVPlayerError {
  public init?(intValue: Swift.Int)
  public var intValue: Swift.Int? {
    get
  }
}
@_hasMissingDesignatedInitializers public class OTVDecoderInfo {
  public var decoderName: Swift.String
  public var decoderMimeType: Swift.String
  public var maxInstances: Swift.Int?
  @objc deinit
}
@objc public enum OTVOutputDeviceType : Swift.Int {
  case digital = 1
  case airplay = 2
  case recording = 3
  case mirroring = 4
  case unknown = 5
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension Foundation.NSNotification.Name {
  public static let OTVOutputDeviceConnected: Foundation.Notification.Name
  public static let OTVOutputDeviceDisconnected: Foundation.Notification.Name
}
@objc public class OTVOutputDeviceMonitor : ObjectiveC.NSObject {
  public init(player: OPYSDKFPSTv.OTVAVPlayer)
  @objc deinit
  @objc override dynamic public func observeValue(forKeyPath keyPath: Swift.String?, of object: Any?, change: [Foundation.NSKeyValueChangeKey : Any]?, context: Swift.UnsafeMutableRawPointer?)
}
@_hasMissingDesignatedInitializers public class OTVVideoDecoderInfo : OPYSDKFPSTv.OTVDecoderInfo {
  public var decoderProfileLevels: [[Swift.Int]]?
  public var isHardwareSupported: Swift.Bool
  public var isTunellingSupported: Swift.Bool
  public var supportedMaxResolution: [[Swift.Int]]?
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class OTVMediaInfo : ObjectiveC.NSObject {
  @objc public var duration: Swift.Double {
    get
  }
  @available(*, deprecated, renamed: "selectedBitrate")
  @objc public var selectedBandwidth: Swift.Double {
    @objc get
  }
  @objc public var selectedBitrate: Swift.Double {
    get
  }
  @objc public var selectedResolution: CoreFoundation.CGSize {
    get
  }
  @objc public var selectedEstimateSize: Swift.UInt64 {
    @objc get
  }
  @objc public var selectedStreamInfo: OPYSDKFPSTv.OTVStreamInfo? {
    @objc get
    @objc set
  }
  @objc public var mediaSelections: OPYSDKFPSTv.OTVMediaSelectionOptions
  @objc public var availableIFrameTracks: [OPYSDKFPSTv.OTVIframeTracks]? {
    get
  }
  @objc public var availableStreamInfo: [OPYSDKFPSTv.OTVStreamInfo]? {
    get
  }
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class OTVStreamInfo : ObjectiveC.NSObject, Swift.Codable {
  @objc public var duration: Swift.Double {
    get
  }
  @objc public var bitrate: Swift.Double {
    get
  }
  @objc public var totalSizeEstimate: Swift.UInt64
  @objc public var resolution: CoreFoundation.CGSize {
    get
  }
  @objc public var codecs: Swift.String {
    get
  }
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc public enum OTVMediaSelectionOptions : Swift.Int, Swift.Comparable {
  public static func < (lhs: OPYSDKFPSTv.OTVMediaSelectionOptions, rhs: OPYSDKFPSTv.OTVMediaSelectionOptions) -> Swift.Bool
  case perferred = 1
  case all = 2
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers public class OTVMediaTracks : ObjectiveC.NSObject {
  @objc public var type: Swift.String? {
    get
  }
  @objc public var name: Swift.String? {
    get
  }
  @objc public var language: Swift.String? {
    get
  }
  @objc public var isDefault: Swift.String? {
    get
  }
  @objc public var autoSelect: Swift.String? {
    get
  }
  @objc public var groupId: Swift.String? {
    get
  }
  @objc public var characteristics: Swift.String? {
    get
  }
  @objc public var channels: Swift.Int {
    get
  }
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class OTVIframeTracks : ObjectiveC.NSObject {
  @objc public var bandwith: Swift.Int {
    get
  }
  @objc public var averageBandwidth: Swift.Int {
    get
  }
  @objc public var uri: Swift.String? {
    get
  }
  @objc public var codecs: Swift.String? {
    get
  }
  @objc public var resolution: CoreFoundation.CGSize {
    get
  }
  @objc deinit
}
@objc public protocol OTVLicenseDelegate : ObjectiveC.NSObjectProtocol {
  @objc func scheme() -> Swift.String?
  @objc func contentIdentifier(url: Foundation.URL) -> Foundation.Data?
  @objc func certificate() -> Foundation.Data?
  @objc func ckcMessage(spc: Foundation.Data) -> Foundation.Data?
  @objc func ckcMessageWithID(spc: Foundation.Data, assetID: Swift.String) -> Foundation.Data?
  @objc func ckcMessageWith(spc: Foundation.Data, assetID: Swift.String, session: AVFoundation.AVContentKeySession, keyRequest: AVFoundation.AVContentKeyRequest) -> Foundation.Data?
}
extension OPYSDKFPSTv.OTVLicenseDelegate {
  public func ckcMessageWithID(spc: Foundation.Data, assetID: Swift.String) -> Foundation.Data?
  public func ckcMessageWith(spc: Foundation.Data, assetID: Swift.String, session: AVFoundation.AVContentKeySession, keyRequest: AVFoundation.AVContentKeyRequest) -> Foundation.Data?
}
public typealias OTVMediaToken = Swift.String
@objc @_inheritsConvenienceInitializers public class OTVSSPLicenseDelegate : OPYSDKFPSTv.OTVCommonLicenseDelegate {
  @objc public func setHTTPHeaderType(type: Swift.String)
  @objc public init(certificateURL: Foundation.URL, licenseURL: Foundation.URL, ssmServerURL: Foundation.URL?, syncSSMSetupTeardown: Swift.Bool)
  @objc convenience public init(certificateURL: Foundation.URL, licenseURL: Foundation.URL, ssmServerURL: Foundation.URL?)
  @objc convenience override public init(certificateURL: Foundation.URL, licenseURL: Foundation.URL)
  @objc deinit
  @objc override public func generateHTTPHeaders(assetID: Swift.String) -> [Swift.String : Swift.String]?
  @objc override public func getLicenseRequestUrl() -> Foundation.URL
  @objc override public func getCkcFromLicenseResponse(response: [Swift.String : Any]) -> Swift.String?
  @objc override public func ckcMessageWith(spc: Foundation.Data, assetID: Swift.String, session: AVFoundation.AVContentKeySession, keyRequest: AVFoundation.AVContentKeyRequest) -> Foundation.Data?
  @objc public func setStream(token: OPYSDKFPSTv.OTVMediaToken, with url: Foundation.URL, success: @escaping () -> Swift.Void = { /* Default Empty Closure */ }, failure: @escaping () -> Swift.Void = { /* Default Empty Closure */ })
  @objc public func setToken(initialToken: OPYSDKFPSTv.OTVMediaToken, tokenCallback: @escaping () -> (Swift.String))
}
public class OTVDecoderFormat {
  public var mimeType: Swift.String
  public var codecs: Swift.String?
  public init(mimeType: Swift.String, codecs: Swift.String? = nil)
  @objc deinit
}
public let seekingNotification: Foundation.Notification.Name
public let seekedNotification: Foundation.Notification.Name
extension OPYSDKFPSTv.OTVAVPlayerItem {
  @objc override dynamic public func seek(to time: CoreMedia.CMTime, toleranceBefore: CoreMedia.CMTime, toleranceAfter: CoreMedia.CMTime, completionHandler: ((Swift.Bool) -> Swift.Void)? = nil)
  @objc override dynamic public func seek(to date: Foundation.Date, completionHandler: ((Swift.Bool) -> Swift.Void)? = nil) -> Swift.Bool
}
public enum ThumbnailError : Swift.String {
  case parseError
  case dataError
  case communicationError
  case accessError
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@objc @_hasMissingDesignatedInitializers public class OTVTrackInfo : ObjectiveC.NSObject {
  @objc final public let type: OPYSDKFPSTv.OTVTrackType
  @objc final public let name: Swift.String
  @objc final public let language: Swift.String?
  @objc final public let mediaType: Swift.String
  @objc final public let channelCount: Swift.Int
  @objc final public let codec: Swift.Int
  @objc final public let characteristics: [Swift.String]
  @objc deinit
}
extension OPYSDKFPSTv.OTVTrackInfo {
  public static func == (lhs: OPYSDKFPSTv.OTVTrackInfo, rhs: OPYSDKFPSTv.OTVTrackInfo) -> Swift.Bool
}
public let availableBitratesChangedName: Foundation.Notification.Name
public let selectedBitrateChangedName: Foundation.Notification.Name
extension CoreFoundation.CGSize : Swift.Comparable {
  public static func < (lhs: CoreFoundation.CGSize, rhs: CoreFoundation.CGSize) -> Swift.Bool
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class OTVAudioDecoderInfo : OPYSDKFPSTv.OTVDecoderInfo {
  @objc deinit
}
@objc open class OTVCommonLicenseDelegate : ObjectiveC.NSObject, OPYSDKFPSTv.OTVLicenseDelegate {
  @objc public init(certificateURL: Foundation.URL, licenseURL: Foundation.URL)
  @objc open func scheme() -> Swift.String?
  @objc open func contentIdentifier(url: Foundation.URL) -> Foundation.Data?
  @objc open func certificate() -> Foundation.Data?
  @objc open func ckcMessage(spc: Foundation.Data) -> Foundation.Data?
  @objc open func ckcMessageWithID(spc: Foundation.Data, assetID: Swift.String) -> Foundation.Data?
  @objc open func ckcMessageWith(spc: Foundation.Data, assetID: Swift.String, session: AVFoundation.AVContentKeySession, keyRequest: AVFoundation.AVContentKeyRequest) -> Foundation.Data?
  @objc open func generateHTTPHeaders(assetID: Swift.String) -> [Swift.String : Swift.String]?
  @objc open func getLicenseRequestUrl() -> Foundation.URL
  @objc open func getCkcFromLicenseResponse(response: [Swift.String : Any]) -> Swift.String?
  @objc deinit
}
public let availableResoloutionsChangedName: Foundation.Notification.Name
public let selectedResoloutionsChangedName: Foundation.Notification.Name
@_hasMissingDesignatedInitializers public class OTVReachability {
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class OTVAVPlayerItem : AVFoundation.AVPlayerItem {
  @objc dynamic public var metadata: Swift.String
  @objc convenience dynamic public init(asset: AVFoundation.AVAsset)
  @objc convenience dynamic public init(url URL: Foundation.URL)
  @objc deinit
}
extension OPYSDKFPSTv.OTVSDK.OTVError : Swift.Equatable {}
extension OPYSDKFPSTv.OTVSDK.OTVError : Swift.Hashable {}
extension OPYSDKFPSTv.OTVSDK.OTVError : Swift.RawRepresentable {}
extension OPYSDKFPSTv.OTVTrackType : Swift.Equatable {}
extension OPYSDKFPSTv.OTVTrackType : Swift.Hashable {}
extension OPYSDKFPSTv.OTVTrackType : Swift.RawRepresentable {}
extension OPYSDKFPSTv.OTVIFrameThumbnailError : Swift.Equatable {}
extension OPYSDKFPSTv.OTVIFrameThumbnailError : Swift.Hashable {}
extension OPYSDKFPSTv.OTVIFrameThumbnailError : Swift.RawRepresentable {}
extension OPYSDKFPSTv.OTVIFrameThumbnailError : Swift.CodingKey {}
extension OPYSDKFPSTv.OTVLicenseRenewType : Swift.Equatable {}
extension OPYSDKFPSTv.OTVLicenseRenewType : Swift.Hashable {}
extension OPYSDKFPSTv.OTVLicenseRenewType : Swift.RawRepresentable {}
extension OPYSDKFPSTv.OTVLicenseRenewType : Swift.CodingKey {}
extension OPYSDKFPSTv.OTVLicenseRequestType : Swift.Equatable {}
extension OPYSDKFPSTv.OTVLicenseRequestType : Swift.Hashable {}
extension OPYSDKFPSTv.OTVLicenseRequestType : Swift.RawRepresentable {}
extension OPYSDKFPSTv.OTVLicenseRequestType : Swift.CodingKey {}
extension OPYSDKFPSTv.OTVDRMInfo.OTVDRMSecurityLevel : Swift.Equatable {}
extension OPYSDKFPSTv.OTVDRMInfo.OTVDRMSecurityLevel : Swift.Hashable {}
extension OPYSDKFPSTv.OTVDRMInfo.OTVDRMSecurityLevel : Swift.RawRepresentable {}
extension OPYSDKFPSTv.OTVNetworkAnalytics.OTVHTTPError : Swift.Equatable {}
extension OPYSDKFPSTv.OTVNetworkAnalytics.OTVHTTPError : Swift.Hashable {}
extension OPYSDKFPSTv.OTVNetworkAnalytics.OTVHTTPError : Swift.RawRepresentable {}
extension OPYSDKFPSTv.OTVNetworkAnalytics.NetworkError : Swift.Equatable {}
extension OPYSDKFPSTv.OTVNetworkAnalytics.NetworkError : Swift.Hashable {}
extension OPYSDKFPSTv.OTVNetworkAnalytics.NetworkError : Swift.RawRepresentable {}
extension OPYSDKFPSTv.OTVNetworkAnalytics.Event : Swift.Equatable {}
extension OPYSDKFPSTv.OTVNetworkAnalytics.Event : Swift.Hashable {}
extension OPYSDKFPSTv.OTVNetworkAnalytics.Event : Swift.RawRepresentable {}
extension OPYSDKFPSTv.OTVDRMManager.OTVDRMLicenseError : Swift.Equatable {}
extension OPYSDKFPSTv.OTVDRMManager.OTVDRMLicenseError : Swift.Hashable {}
extension OPYSDKFPSTv.OTVDRMManager.OTVDRMLicenseError : Swift.RawRepresentable {}
extension OPYSDKFPSTv.OTVPlaybackAnalytics.Event : Swift.Equatable {}
extension OPYSDKFPSTv.OTVPlaybackAnalytics.Event : Swift.Hashable {}
extension OPYSDKFPSTv.OTVPlaybackAnalytics.Event : Swift.RawRepresentable {}
extension OPYSDKFPSTv.OTVAVPlayerError : Swift.Equatable {}
extension OPYSDKFPSTv.OTVAVPlayerError : Swift.Hashable {}
extension OPYSDKFPSTv.OTVAVPlayerError : Swift.RawRepresentable {}
extension OPYSDKFPSTv.OTVAVPlayerError : Swift.CodingKey {}
extension OPYSDKFPSTv.OTVAVFoundationError : Swift.Equatable {}
extension OPYSDKFPSTv.OTVAVFoundationError : Swift.Hashable {}
extension OPYSDKFPSTv.OTVAVFoundationError : Swift.RawRepresentable {}
extension OPYSDKFPSTv.OTVAVFoundationError : Swift.CodingKey {}
extension OPYSDKFPSTv.OTVOutputDeviceType : Swift.Equatable {}
extension OPYSDKFPSTv.OTVOutputDeviceType : Swift.Hashable {}
extension OPYSDKFPSTv.OTVOutputDeviceType : Swift.RawRepresentable {}
extension OPYSDKFPSTv.OTVMediaSelectionOptions : Swift.Hashable {}
extension OPYSDKFPSTv.OTVMediaSelectionOptions : Swift.RawRepresentable {}
extension OPYSDKFPSTv.ThumbnailError : Swift.Equatable {}
extension OPYSDKFPSTv.ThumbnailError : Swift.Hashable {}
extension OPYSDKFPSTv.ThumbnailError : Swift.RawRepresentable {}
